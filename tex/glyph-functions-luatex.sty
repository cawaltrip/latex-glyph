%% glyph-functions-luatex.sty
%% Copyright 2023 Chris Waltrip
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   https://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2008 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Chris Waltrip.
%
% This work consists of all files listed in ../MANIFEST-LPPL.md.

\IfPackageLoadedTF{glyph-functions}
    {}
    {
        \PackageError{glyph-functions-luatex}
            {Improperly sourced}
            {This is a package internal to glyph and should only be called by glyph itself.} 
    }
\errorcontextlines 5
\ProvidesExplPackage{glyph-functions-luatex}{2023/07/11}{0.0.1}{LuaTeX~functions~for~glyph~package}

\RequirePackage{luatexbase} % Used to access font information and category code table
\RequirePackage{luaotfload} % Used for loading/reading fonts
\RequirePackage{fontspec} % Used for some of its helper functions
\RequirePackage{luacode} % Used for debugging.

\directlua{require('glyph')}

\cs_new_protected:Npn\__glyph_parse_font:N #1 {
  % Takes in a clist of the form:
  % {prefix, Font Name, (single|dual)}
  \tl_clear_new:N\l_glyph_prefix_tl
  \tl_clear_new:N\l_glyph_font_tl
  \tl_clear_new:N\l_glyph_type_tl
  
  \clist_set:Nx\l_tmpa_clist{#1}

  \tl_set:Nx\l_glyph_prefix_tl{\clist_item:Nn\l_tmpa_clist{1}}
  \tl_set:Nx\l_glyph_font_tl{\clist_item:Nn\l_tmpa_clist{2}}
  \tl_set:Nx\l_glyph_type_tl{\clist_item:Nn\l_tmpa_clist{3}}  

  \group_begin:
  \fontspec{\l_glyph_font_tl}
  \lua_now:e{u.generate_glyph_commands(
    \tex_fontid:D\tex_font:D,
    "\luaescapestring{\l_glyph_prefix_tl}",
    "true"
  )}

  % \exp_args:Nc \NewDocumentCommand {\l_glyph_prefix_tl Glyph} {s m} {

  % }
}

\cs_new:Npn\__glyph_get_index:n #1 {
  % Assumes it's being called by \__glyph_put_glyph:nnn and
  % as such that the font has been loaded by fontspec.
  % \lua_now:e{tex.sprint(font.getfont(font.current()).resources.unicodes[token.scan_string()]~or~0)}
  \int_set:Nn\l_tmpa_int{\lua_now:e{u.get_glyph_index("\luaescapestring{#1}")}} % This works?
  \typeout{after~int_set~inside~glyph_get_index}
  \int_show:N\l_tmpa_int
  \typeout{after~int_show~inside~glyph_get_index}
  % \lua_now:e{u.get_glyph_index("\luaescapestring{\l_tmpa_tl}")}
}

\cs_set_eq:NN\__glyph_glyph:w\tex_char:D

% \cs_new_protected:Nn\__glyph_put_glyph:nnn{
\cs_new:Nn\__glyph_put_glyph:nnn{
  % #1 = Font Name
  % #2 = Single/Dual Glyph
  % #3 = Glyph Name
  \group_begin:
    \typeout{testing~input~to~glyph_put_glyph}
    \tl_show:n{#1}
    \tl_show:n{#2}
    \tl_show:n{#3}
    % \fontspec{#1}
    \fontspec{Font Awesome 6 Pro Regular}
    \tl_set:Nn\l_tmpa_tl{#3}
    \tl_show:N\l_tmpa_tl
    \tl_show:n{\l_tmpa_tl}
    \typeout{after~tl_show:N~and~tl_show:n~in~glyph_put_glyph}
    
    \tl_set_eq:NN\l_tmpb_tl\l_tmpa_tl % used for handling dual glyphs
    \tl_if_eq:nnT{#2}{dual}{
      \tl_put_right:Nn\l_tmpa_tl{-primary} % specific to Font Awesome Duotone fonts currently.
      \tl_put_right:Nn\l_tmpb_tl{-secondary}
    }
    \typeout{before~glyph~get~index}
    \__glyph_get_index:n{\l_tmpa_tl}
    \typeout{after~glyph~get~index}
    % \int_set:No\l_tmpa_int{\__glyph_get_index:n{\l_tmpa_str}}
    \typeout{l_tmpa_int~=~}
    \int_show:N\l_tmpa_int
    \int_compare:nNnTF{\l_tmpa_int}={0}{
      \glyph_warning:nx{glyph-not-found}{\l_tmpa_str}
    } {
      \bool_if:NTF\g__glyph_fixedwidth_bool {
        % TODO: Make sure this works
        % \makebox[\g__glyph_fixedwidth_fp em]
      } {
        \use:n
      }
      \typeout{right~before~calling~glyph_glyph}
      \int_show:N\l_tmpa_int
      % \__glyph_glyph:w \l_tmpa_int
      \symbol{\l_tmpa_int}
      \str_if_eq:nnT{#2}{dual}{
        % Then we need to move the cursor back and add the second glyph.
        \int_set:Nn\l_tmpa_int{\__glyph_get_index:n{\l_tmpb_str}}
        \int_compare:nNnTF{\l_tmpa_int}={0}{
          \glyph_warning:nx{glyph-not-found}{\l_tmpb_str}
        } {
          \llap{
            \color{\g__glyph_dualglyph_secondarycolor_tl}
            \__glyph_glyph:w\l_tmpa_int
          }
        }
      }
    }
  \group_end:
}

\cs_new_protected:Nn\__glyph_debug_glyph_info:N{
    \seq_map_inline:Nn #1 {
        \tl_clear_new:N\l_glyph_prefix_tl
        \tl_clear_new:N\l_glyph_font_tl
        \tl_clear_new:N\l_glyph_type_tl
        \clist_set:Nn\l_tmpa_clist{##1} % contains {prefix, Font Name, single|dual}
        \tl_set:Nx\l_glyph_prefix_tl{\clist_item:Nn\l_tmpa_clist{1}}
        \tl_set:Nx\l_glyph_font_tl{\clist_item:Nn\l_tmpa_clist{2}}
        \tl_set:Nx\l_glyph_type_tl{\clist_item:Nn\l_tmpa_clist{3}}
        \IfFontExistsTF{\l_glyph_font_tl}
        {
            % \typeout{the~font~{\l_glyph_font_tl}~exists}
            \group_begin:
                \fontspec{\l_glyph_font_tl}
                % \typeout{tex_font~\tex_font}
                % \typeout{tex_fontid~\tex_fontid:D\tex_font:D}
                \lua_now:e{u.print_glyph_table(\tex_fontid:D\tex_font:D)}
            \group_end:
            \seq_map_break:
        }
        {
            \typeout{the~font~{\l_glyph_font_tl} ~does~not~exist}
        }
    }
}

% Debugging & test functions
\cs_new_protected:Nn\__glyph_debug_repeater:n{
  \lua_now:e{u.repeater("\luaescapestring{#1}")}
}