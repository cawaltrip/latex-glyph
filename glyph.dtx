% \iffalse meta-comment
%
% glyph.dtx 
%
% Copyright © 2023 Chris Waltrip
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License (SPDX: LPPL), 
% either version 1.3 of this license or (at your option) any 
% later version. The latest version of this license is at
%   https://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2008 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Chris Waltrip.
%
% This work consists of all files listed in ./MANIFEST-LPPL.md.
%<*driver>
% Don't know if this line is important
\ProvidesFile{glyph.dtx}[2023/08/04 LaTeX package for arbitrary glyph command generation]
\documentclass{l3doc}
% Want to be able to print our own glyphs, so include us.
\usepackage[
  fonts = { 
    fa = Font Awesome 6 Pro Regular,
    fab = Font Awesome 6 Brands
  },
  dualglyphFonts = {
    fad = Font Awesome 6 Duotone
  },
  dualglyphFontsSecondaryColor = {red}
]
  {glyph}
\usepackage{hologo}
\errorcontextlines 10
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{glyph.sty}
%
% \title{The \pkg{glyph}\thanks{\href{https://github.com/cawaltrip/latex-glyph}{\fabGithub/latex-glyph}} package}
% \author{Chris Waltrip\thanks{\href{https://github.com/cawaltrip}{\fabGithub/cawaltrip}}}
% \date{Released \filedate}
% \maketitle
%
% \changes{0.0.1}{2023/08/04}{Alpha release}
%
% \begin{documentation}
%
% \section{Introduction}
% I had a conundrum.  I wanted to use icon fonts in some of my work.
% I could use the \pkg{fontawesome5} package (and indeed I have!).
% But I wanted the ability to use new glyphs, and new styles, and 
% \pkg{fontawesome5} is well... version 5.  And really what I wanted
% to do was dip my feet into the world of \LaTeX\ package writing, so
% I started working on a package I was going to call \pkg{fontawesomex}, 
% and it would support all of the current versions of \emph{Font Awesome}.
% But then I realized that I wanted to use glyphs from other icon fonts.
% So I changed the name to \pkg{glyph} and that's where we're at now!\par
%
% The idea with this package is that it'll scan the fonts you provide in
% the options and create commands for every printable glyph it finds that
% has a printable name.  The names of the commands are created based on a
% few basic rules; on the plus-side this means predictability no matter the
% font, but with the downside that some glyph names may be a bit unwieldy.\par
%
% I also wanted a way to be able to print the glyphs and their glyph names
% as a debugging tool, but I think it can help users of this package determine
% how to call the glyphs they're interested in printing, and so I expanded the 
% command and exposed it publically so that you can create a full catalog of
% glyphs too!\par
%
% \section{Credits, Thanks \& Ripoffs}
% This needs a better title, but I could not have done this without the
% unwitting (and unknowing) help of Marcel Krüger.  The work he's done to
% create the \pkg{fontawesome5} package helped give me a much deeper
% understanding of \pkg{expl3}, and the different typesetting engines.
% 
% \subsection{Known limitations and feature requests}
% This list isn't exhaustive, but there are some things you should know about
% this package before getting too excited.  I'm using this section to store
% my |TODO|s and |FIXME|s. I hope to get to them \emph{eventually}™.
% \begin{itemize}
%   \item \emph{dual glyphs} only support the Font Awesome style of glyph
%         names ending in |-primary| and |-secondary|.
%   \item Arbitrary font features (e.g., ligatures) aren't supported.
%   \item If there's a glyph called \enquote{glyph}, we'll break.
%   \item \hologo{LuaLaTeX} isn't handling fixed width fonts.
%   \item options can't be changed mid-document (specifically, \emph{dualglyphFontsSecondaryColor}).
%   \item the command that dumps the entire glyph table does not display \emph{dual glyph} characters together.
%   \item some of the document commands (at least the \cs{\meta{prefix}Glyph\meta{glyph-name}} commands) should
%         be cleaned up and placed under a single command (e.g., \cs{PutGlyph\oarg{prefix}\meta{glyph-name}}) in
%         order to prevent colliding with a glyph named \enquote{glyph}.
%   \item the font family naming scheme is defined at the \pkg{glyph-functions-luatex} level and should instead be 
%         defined at the \pkg{glyph-functions} to prevent mixing up names when working on support for other engines.
%   \item rename the internal \enquote{debug} functions, to more accurately depict their use (typesetting all the
%         glyphs of a font).
% \end{itemize}
% Some things that I still need to understand a bit better and get answered/fixed.
% \begin{itemize}
%   \item Which of my functions can be protected/robustified?
%   \item Is the method I use to find C0/C1 glyphs going to work?
%   \item Do I actually need \cs{__glyph_bool_from_str}?
%   \item Will right-to-left languages be able to use \emph{dual glyphs}?  How is LTR/RTL done in LaTeX?
% \end{itemize}

% \section{Typesetting Engine Support}
% This package currently only works with \hologo{LuaLaTeX}.  I have plans
% for \hologo{XeLaTeX} in the future, but I don't know that I'll ever 
% support \hologo{pdfLaTeX}.
%
% \section{Documentation}
% \subsection{Configuration}
% This package is currently pretty inflexible when it comes to configuration.
% Fonts and options need to be specified at the time the package is called,
% and it must be in the preamble.  There are no ways to add/update options
% on the fly.  For the most part, this is no problem.  But if you are using
% a character that requires two glyphs stacked on top of one another (e.g., 
% Font Awesome Duotone), or what I'll refer to from here on out as 
% \emph{dual glyphs}, the color of the second glyph can't be changed. Calling
% \pkg{glyph} should look like
% 
% \begin{function}{\usepackage[options]{glyph}}
%   \begin{syntax}
%     \cs{usepackage}\oarg{options}|{glyph}|
%   \end{syntax}
%  
%   The \oarg{options} are a key--value list which can contain the following keys:
%
%   \begin{itemize}
%     \item |fonts=| |{| Comma-separated list of |<prefix> = <font name> }|
%     \item |dualglyphFonts=| |{| Comma-separated list of |<prefix> = <font name> }| \footnote{Expect this to be merged into fonts in the future}
%     \item |dualglyphFontsSecondaryColor=| |{|a color in a form that \pkg{xcolor} accepts |}|
%   \end{itemize}
% \end{function}
%
% Glyphs can be called with either 
% \begin{itemize}
%  \item \cs{\meta{prefix}\meta{GlyphName}}
%  \item \cs{\meta{prefix}Glyph\meta{glyph-name}}\footnote{This will be changing soon to help against collisions with glyphs named \enquote{glyph}}
% \end{itemize}
% 
% 
% \subsubsection*{Example}
% If you wanted to load some \emph{Font Awesome} fonts, and then call a few 
% glyphs, you might use the followning invocation.
% 
% ^^A  \begin{verbatim}
% ^^A  ...
% ^^A  \usepackage[
% ^^A   fonts = {
% ^^A       fa = Font Awesome 6 Pro Regular,
% ^^A       fas = Font Awesome 6 Pro Solid,
% ^^A       fab = Font Awesome 6 Brands
% ^^A   },
% ^^A   dualglyphFonts = {
% ^^A       fad = Font Awesome 6 Duotone,
% ^^A   },
% ^^A   dualglyphFontsSecondaryColor = {blue}
% ^^A  ]{glyph}
% ^^A  ...
% ^^A  \begin{document}
% ^^A  Do you want an awesome face?  Have two! \faFaceAwesome\ and \faGlyph{face-awesome}!
% ^^A  What about a glyph with illegal control sequence characters?  Try \fasTransporterOne
% ^^A  or \fasGlyph{transporter-one}.  Duotone icons work natively too: \fadWandMagicSparkles.
% ^^A \end{verbatim}
%
% \subsection{Dependencies}
% This package relies on
% \begin{itemize}
%   \item \pkg{fontspec} for font family creation and general font management,
%   \item \pkg{tcolorbox} for creating the boxes that glyphs are displayed in when dumping all glyphs, and
%   \item \pkg{multicol} for arranging all said boxes.
% \end{itemize}
%
% \end{documentation}
%
%
% \begin{implementation}
% 
% \section{\pkg{glyph} implementation}
%
% Start the \pkg{DocStrip} guards
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%
% Identify the internal prefix (\hologo{LaTeX3} \pkg{DocStrip} convention)
%    \begin{macrocode}
%<@@=glyph>
%    \end{macrocode}
%
% \subsection{Initial setup}
%
%    \begin{macrocode}
%<*init>
%    \end{macrocode}
%
% Here is where we declare all of the basic information about
% the package, and do initial checks to make sure the package
% will run (e.g., the version of \hologo{LaTeX2e} is new enough).
%
% I plan on writing more here once I make sure that this is building properly.
%
% Set up a couple of commands in recent-ish \LaTeXe{} releases.
%    \begin{macrocode}
\providecommand\DeclareRelease[3]{}
\providecommand\DeclareCurrentRelease[2]{}
%    \end{macrocode}
% 
% Provide current release information, and if necessary, older 
% (breaking) releases.
%    \begin{macrocode}
% ^^A \DeclareRelease{x}{1970-01-01}{glyph-oldversion.sty}
\DeclareCurrentRelease{}{2023-08-04}
%    \end{macrocode}
%
% Make sure \pkg{expl3} \enquote{up-front} is loaded, because we start using \hologo{LaTeX3}
% syntax early on.
%
%    \begin{macrocode}
\RequirePackage{expl3}
%    \end{macrocode}
%
% Provide package information.
%    \begin{macrocode}
\ProvidesExplPackage{glyph}{2023-08-04}{0.0.1}
  {LaTeX support for placing font glyphs via glyph name}
%    \end{macrocode}
%
%    \begin{macrocode}
%</init>
%    \end{macrocode}
%
%    \begin{macrocode}
%<*options>
%    \end{macrocode}
%
% \subsection{Global Variables}
% Before declaring options, some variables that are used throughout
% the project are declared.
% 
% \begin{variable}{\g_@@_fonts_list_prop, \g_@@_dualglyph_fonts_list_prop}
% A property map of the |prefix = font name| options the user sets for single
% or \emph{dual glyph} fonts.
%    \begin{macrocode}
\prop_new:N\g_@@_fonts_list_prop
\prop_new:N\g_@@_dualglyph_fonts_list_prop
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_fixedwidth_bool, \g_@@_fixedwidth_bool}
% Booleans that are set to determine if the glyphs should be typeset as if 
% they were part of a fixed-width font.
%    \begin{macrocode}
\bool_new:N\g_@@_fixedwidth_bool
\bool_new:N\g_@@_dualgllyph_fixedwidth_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_fixedwidth_fp, \g_@@_fixedwidth_fp}
% The floating-point values (in |em|s) to use for the glyphs if they're to 
% be considered fixed-width.
%   \begin{macrocode}
\fp_new:N\g_@@_fixedwidth_fp
\fp_new:N\g_@@_dualglyph_fixedwidth_fp
%   \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_debug_output_bool}
% A non-publicly documented variable that will spill a lot of details about the
% \cs{NewDocumentCommand}s being created for all the glyphs.
%    \begin{macrocode}
\bool_new:N\g_@@_debug_output_bool
%    \end{macrocode}
% \end{variable}
%
% \begin{variable}{\g_@@_font_map_seq}
% The ultimate data structure used to store the details of the fonts in use.  
% Each item in the sequence is a |CList| containing:
%   \begin{enumerate}
%     \item prefix,
%     \item font name,
%     \item single/dual,
%     \item fixed width\footnote{Not yet implemented.}
%     \item fixed width size\footnote{Not yet implemented.}
%   \end{enumerate}
% This data structure is passed to the functions that create all the 
% \cs{NewDocumentCommand}s representing the glyphs.
%    \begin{macrocode}
\seq_new:N\g_@@_font_map_seq
%    \end{macrocode}
% \end{variable}
%
% \begin{macro}{\@@_bool_from_str:n}
% To be honest, I don't actually think I need this, and that it's just a relic
% left over from when I was trying to understand how \cs{DeclareKeys} worked.
% I'll leave it in for now until I test otherwise (because it ain't broke).
%    \begin{macrocode}
\cs_generate_variant:Nn\str_if_eq:nnTF {eeTF}
\prg_new_conditional:Npnn \__glyph_bool_from_str:n #1 { p, TF } {
  \str_if_eq:eeTF{\str_casefold:n{true}}{\str_casefold:n{#1}}{\prg_return_true:}{\prg_return_false:}
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{\pkg{glyph} package declarations}
% |fonts| and |dualglyphFonts| really need to be merged.  I can just parse 
% the additional key--value pairs in the |fonts| option itself. It would 
% also store the fixed-width information and secondary glyph color for 
% the \emph{dual glyph} fonts.  The |fixed| (and by extension, |width|) keys
% are declared for all fonts specified in |fonts| and |dualglyphFonts|, but
% that is likely to change to be specified per-font. All options can only 
% be set in the preamble.  While that's fine for most, setting the secondary 
% color should be possible anywhere.\par
%
% ^^A TODO: Move this next paragraph to a more appropriate place.
% We require \pkg{\hologo{LaTeX2e}[2022-06-01]} earlier so that we have
% access to \cs{DeclareKeys}, \cs{SetKeys}, and \cs{ProcessKeyOptions}.
% Additionally, in \pkg{\hologo{LaTeX2e}[2020-10-01]}, \pkg{xparse} commands 
% like \cs{NewDocumentCommand} were added into the kernel, so we get those
% as well.  They aren't used here, but we make extensive use of them
% in this package.
%    \begin{macrocode}
\DeclareKeys[glyph] {
  fonts .code = \prop_put_from_keyval:Nn\g_@@_fonts_list_prop{#1},

  dualglyphFonts .code = \prop_put_from_keyval:Nn\g_@@_dualglyph_fonts_list_prop{#1},
  dualglyphFontsSecondaryColor .store = \g_@@_dualglyph_secondarycolor_tl,

  fixed .code = \bool_set:Nn\g_@@_fixedwidth_bool{\__glyph_bool_from_str_p:n{#1}},
  width .store = \g_@@_fixedwidth_fp,
  debug .code = \bool_set:Nn\g_@@_debug_output_bool{\__glyph_bool_from_str_p:n{#1}},

  fonts .usage = load,
  
  dualglyphFonts .usage = load,
  dualglyphFontsSecondaryColor .usage = load,

  fixed .usage = load,
  width .usage = load
}

\SetKeys[glyph]{
  dualglyphFontsSecondaryColor = {blue},
  fixed = false,
  width = 1.25,
  debug = false
}

\ProcessKeyOptions[glyph]
%    \end{macrocode}
%
%    \begin{macrocode}
%</options>
%    \end{macrocode}
% 
% \subsection{Required Packages}
%    \begin{macrocode}
%<*interfaces>
%    \end{macrocode}
% 
% \pkg{fontspec} is used for creating the font family and for searching for
% fonts by name.  \pkg{tcolorbox}, and \pkg{multicol} are used for displaying
% the glyphs in individual boxes when the glyphs are showcased.
%    \begin{macrocode}
\RequirePackage{fontspec}
\RequirePackage[many]{tcolorbox}
\RequirePackage{multicol}
%    \end{macrocode}
%
% \subsection{Generate Document-level Commands}
% Combine the maps of fonts the user supplied into one sequence that uses 
% |CList|s internally as its data structure, then start creating all the
% document-level commands.
%    \begin{macrocode}
\__glyph_create_seq_map:NNn\g_@@_font_map_seq\g_@@_fonts_list_prop{single}
\__glyph_create_seq_map:NNn\g_@@_font_map_seq\g_@@_dualglyph_fonts_list_prop{dual}

\__glyph_parse_fonts:N\g_@@_font_map_seq
%    \end{macrocode}
%
%    \begin{macrocode}
%</interfaces>
%    \end{macrocode}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
% \end{implementation}
%
% \PrintIndex
