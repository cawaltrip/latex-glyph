% \iffalse meta-comment
%
% glyph-functions.dtx 
%
% Copyright Â© 2023 Chris Waltrip
%
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License (SPDX: LPPL), 
% either version 1.3 of this license or (at your option) any 
% later version. The latest version of this license is at
%   https://www.latex-project.org/lppl.txt
% and version 1.3c or later is part of all distributions of LaTeX
% version 2008 or later.
%
% This work has the LPPL maintenance status `maintained'.
% 
% The Current Maintainer of this work is Chris Waltrip.
%
% This work consists of all files listed in ./MANIFEST-LPPL.md.
%
%<*driver>
\documentclass{l3doc}
% Want to be able to print our own glyphs, so include us.
\usepackage{glyph}
\usepackage{hologo}
\begin{document}
  \DocInput{\jobname.dtx}
\end{document}
%</driver>
% \fi
%
% \GetFileInfo{glyph.sty}
%
%
% \title{The \pkg{glyph-functions} package}
% \author{Chris Waltrip\thanks{\href{https://github.com/cawaltrip}{\fabGithub/cawaltrip}}}
% \date{Released \filedate}
% \maketitle
%
% \begin{documentation}
% \section{Introduction}
% This submodule defines functions which are engine-agnostic.
% The functions are dedicated to creating the data structure
% of font information, parsing the fonts, and placing the 
% glyphs.
% \subsection{Parsing}
% Users provide (through the keys declared in \pkg{glyph}), a list 
% of fonts, prefixes for how to reference those fonts, and 
% whether or not the characters are composed of one or two glyphs. 
% That data is turned into a sequence map as described in the 
% documentation for the \pkg{glyph} package.\par
%
% Parsing this new data structure is how the document-level commands
% are created.
%
% \subsection{Placing glyphs}
% There are a couple functions that are used to place the glyph, based
% on the number of glyphs required to show a character.
% 
% \section{Engine-specific Implementations}
% There are a number of functions that each engine needs to implement (i.e.,
% functions that the functions defined in this package call).  Some of these
% are named functions, and others are passed by control sequence name.
% \subsection*{Named Functions}
% \begin{itemize}
%   \item \cs{__glyph_parse_font:N}
%   \item \cs{__glyph_font_debug_info:nn}
% \end{itemize}
% \subsection*{Unnamed Functions}
% \begin{itemize}
%   \item \cs{__glyph_font_family} takes the value of a command 
%         that changes the font to the one needed for placing 
%         the specified glyph.
% \end{itemize}
%
% The~system-specifc~implementations are free to 
% define other functions as needed to perform 
% these requirements.
% \end{documentation}
%
% \begin{implementation}
%
% \section{\pkg{glyph-functions} implementation}
%
%    \begin{macrocode}
%<*package>
%    \end{macrocode}
%    \begin{macrocode}
%<@@=glyph>
%    \end{macrocode}
% 
% \subsection{Parsing Functions}
% \begin{macro}{\@@_create_seq_map:NNn}
%   This takes the user input, and per font, creates |CList|s that
%   are appended to a sequence.
%   \begin{arguments}
%     \item the sequence to add entries to
%     \item the property map containing font information
%   \end{arguments}
%    \begin{macrocode}
\cs_new:Nn\@@_create_seq_map:NNn{
  \prop_map_inline:Nn #2{
    \clist_clear:N\l_tmpa_clist
    \clist_put_right:Nn\l_tmpa_clist{##1}
    \clist_put_right:Nn\l_tmpa_clist{##2}
    \clist_put_right:Nn\l_tmpa_clist{#3}
    \seq_put_right:Nx #1 {\l_tmpa_clist}
  }  
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\@@_parse_fonts:N}
%   This takes in the font map sequence we previously created
%   and calls the function that actually parses a font and
%   creates the document-level commands.
%   \begin{arguments}
%     \item the sequence containing |CList|s to parse.  Each item is in the form:
%     \begin{arguments}
%       \item prefix,
%       \item font name,
%       \item glyph type (single/dual)
%     \end{arguments}
%   \end{arguments}
%    \begin{macrocode}
\cs_new_protected:Npn \@@_parse_fonts:N #1 {
  \seq_map_inline:Nn #1 {
    \clist_set:Nn\l_tmpa_clist{##1}
    \@@_parse_font:N\l_tmpa_clist
  }
}
%    \end{macrocode}
% \end{macro}
%
% \subsection{Glyph Placing Functions}
% Both of the functions used for placing glyphs work
% in the same way.  The more complex one (for placing
% two glyphs for one character) is described.  The
% other is displayed after. 
% \begin{macro}{\@@_put_glyph:nnn, \@@_put_glyph:nn}
%   \begin{arguments}
%     \item the font family (to switch to it)
%     \item the primary codepoint (to place it)
%     \item the secondary codepoint (to overlap it)
%   \end{arguments}
% Because of how the internal functions and document-level commands have been 
% defined, placing a glyph is as simple as switching to the font family and 
% outputting the symbol at the given index.  The \emph{dual glyph} variant 
% has the extra step of overlapping the first symbol and then placing the
% second symbol with the color defined in \cs{g_@@_dualglyph_secondarycolor_tl}.
%    \begin{macrocode}
\cs_set:Nn\@@_put_glyph:nnn{
  \cs_set_eq:Nc\@@_font_family:{#1}

  \tl_set:Nn\l_tmpa_int{#2}
  \tl_set:Nn\l_tmpb_int{#3}

  \group_begin:
  \@@_font_family:
  \symbol{\l_tmpa_int}

  \llap{
    \color{\g_@@_dualglyph_secondarycolor_tl}
    \symbol{\l_tmpb_int}
  }
  \group_end:
}

\cs_set:Nn\@@_put_glyph:nn{
  \cs_set_eq:Nc\@@_font_family:{#1}
  
  \tl_set:Nn\l_tmpa_int{#2}
  
  \group_begin:
  \@@_font_family:
  \symbol{\l_tmpa_int}
  \group_end:
}
%    \end{macrocode}
% \end{macro}
%
%    \begin{macrocode}
%</package>
%    \end{macrocode}
% \end{implementation}
%
% \PrintIndex
